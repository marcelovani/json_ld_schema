<?php

/**
 * @file
 * Module file for the JSON LD Schema module.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_page_bottom().
 */
function json_ld_schema_page_bottom(array &$page_bottom) {
  $source_manager = \Drupal::service('plugin.manager.json_ld_schema.source');
  foreach ($source_manager->getDefinitions() as $definition) {
    /** @var \Drupal\json_ld_schema\Source\JsonLdSourceInterface $source */
    $source = $source_manager->createInstance($definition['id']);
    if (!$source->isApplicable()) {
      continue;
    }
    // Integrate with render cache so we can do expensive things in the
    // JsonLdSource plugin. The "json_ld_source" element adds a pre_render key
    // which will only be run according to the defined cacheability metadata.
    $build = [
      '#type' => 'json_ld_source',
      '#plugin_id' => $definition['id'],
      '#cache' => [
        'keys' => ['json_ld_source', $definition['id']],
      ],
    ];
    $source->getCacheableMetadata()->applyTo($build);
    $page_bottom[sprintf('json_ld_source_%s', $definition['id'])] = $build;
  }
}

/**
 * Implements hook_entity_view().
 */
function json_ld_schema_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Entities are already integrated with render cache. The attached array will
  // be cached along with the markup. Allow each plugin to impact #cache, for
  // additional context/tags, however no need to move expensive calls to
  // pre_render.
  $entity_manager = \Drupal::service('plugin.manager.json_ld_schema.entity');
  foreach ($entity_manager->getDefinitions() as $definition) {
    /** @var \Drupal\json_ld_schema\Entity\JsonLdEntityInterface $json_ld_entity */
    $json_ld_entity = $entity_manager->createInstance($definition['id']);
    if (!$json_ld_entity->isApplicable($entity, $view_mode)) {
      continue;
    }
    // Add the cacheability of the JSON LD plugin to the entity build array,
    // because attachments will be cached alongside the rendered markup in
    // render cache.
    CacheableMetadata::createFromRenderArray($build)
      ->merge($json_ld_entity->getCacheableMetadata($entity, $view_mode))
      ->applyTo($build);
    // Attach the JSON LD script to the head, so that there is no dependency on
    // the rendering of the entity markup in any way.
    $build['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => ['type' => 'application/ld+json'],
        '#value' => json_encode($json_ld_entity->getData($entity, $view_mode)
          ->toArray(), JSON_UNESCAPED_UNICODE),
      ],
      sprintf('json_ld_%s_%s_%s_%s', $entity->getEntityTypeId(), $entity->id(), $view_mode, $definition['id']),
    ];
  }
}
